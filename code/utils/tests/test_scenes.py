from __future__ import print_function, division
import numpy as np
import nibabel as nib
import pandas as pd
import sys
import os
from numpy.testing import assert_almost_equal, assert_array_equal

#uppath = lambda _path, n: os.sep.join(_path.split(os.sep)[:-n])
__file__ = os.getcwd()

#sys.path.append(uppath(__file__, 1))

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__),"../utils/")))
from scenes import on_off_course, multiple_factors_course,gen_sample_by_factors,get_training_samples,get_tst_samples,make_label_by_time,other_scene_ids,analyze_performance

## Create the test image data
shape_3d = (40, 40, 20)
V = np.prod(shape_3d)
T = 438
arr_2d = np.random.normal(size=(V, T))
expected_stds = np.std(arr_2d, axis=0)
arr_4d = np.reshape(arr_2d, shape_3d + (T,))

## Create the test scenes data
scenes=np.array([[  17,  255,    1,   66],
       [ 272,   39,    1,   26],
       [ 311,    6,    1,   36],
       [ 317,   26,    1,   29],
       [ 343,   42,    1,   36],
       [ 385,   49,    1,   38],
       [ 434,   14,    1,   61],
       [ 448,   52,    1,   69],
       [ 500,    7,    1,   69],
       [ 507,    9,    1,   69],
       [ 516,   40,    1,   38],
       [ 556,   30,    1,   40],
       [ 586,    8,    1,   38],
       [ 594,   75,    1,   38],
       [ 669,   33,    1,   36],
       [ 702,   10,    1,   66],
       [ 712,   40,    1,   68],
       [ 752,   26,    1,   67],
       [ 778,   13,    1,   66],
       [ 791,   56,    1,   67],
       [ 847,   18,    1,   73],
       [ 865,   20,    1,   73],
       [ 885,   14,    1,   66],
       [ 899,   80,    1,    1],
       [ 979,   12,    1,   66],
       [ 991,   18,    1,    1],
       [1009,    9,    1,   65],
       [1018,    8,    1,   36],
       [1026,   84,    1,   56],
       [1110,   13,    1,   35],
       [1123,   12,    1,   38],
       [1135,    9,    1,   37],
       [1144,   27,    1,    1],
       [1171,    1,    1,   17],
       [1172,   22,    1,    1],
       [1194,    7,    1,   66],
       [1201,   40,    1,   31],
       [1241,   51,    1,   32],
       [1292,   92,    1,   33],
       [1384,   13,    1,   33],
       [1397,  128,    1,   34],
       [1525,   20,    1,   32],
       [1545,    4,    1,   46],
       [1549,    7,    1,   87],
       [1556,   24,    1,   86],
       [1580,   19,    1,   87],
       [1599,   20,    1,   88],
       [1619,    4,    1,   70],
       [1623,    5,    1,   71],
       [1628,    5,    1,   66],
       [1633,   28,    1,   22],
       [1661,   74,    1,    7],
       [1735,    4,    1,   50],
       [1739,    5,    1,   49],
       [1744,   14,    1,    7],
       [1758,   38,    1,    9],
       [1796,   49,    1,    9],
       [1845,   11,    1,    9],
       [1856,   15,    1,    9],
       [1871,   44,    1,    9],
       [1915,  113,    1,   21],
       [2028,  122,    1,   51],
       [2150,  158,    1,   81],
       [2308,    2,    1,   62],
       [2310,    1,    1,    2],
       [2311,    1,    1,   89],
       [2312,    3,    1,   90],
       [2315,   44,    1,   81],
       [2359,   16,    1,   82],
       [2375,   41,    1,   83],
       [2416,   72,    1,   79],
       [2488,   11,    1,   82],
       [2499,    5,    1,   80],
       [2504,    4,    1,   80],
       [2508,    3,    1,   80],
       [2511,    5,    1,   80],
       [2516,   66,    1,   78],
       [2582,   18,    1,   78],
       [2600,   11,    1,   35],
       [2611,    7,    1,   78],
       [2618,  441,    1,   80],
       [3059,   34,    1,   66],
       [3093,   78,    1,   52],
       [3171,   80,    1,   52],
       [3251,   16,    1,   52],
       [3267,   26,    1,   52],
       [3293,   31,    1,    8],
       [3324,   10,    1,    8],
       [3334,  244,    1,   84],
       [3578,    9,    1,   84],
       [3587,  113,    1,   14],
       [3700,   52,    1,   84],
       [3752,    4,    1,   30],
       [3756,    7,    1,   19],
       [3763,   14,    1,   45],
       [3777,  134,    1,   84],
       [3911,   27,    1,   76],
       [3938,    3,    1,   66],
       [3941,   17,    1,   60],
       [3958,    4,    1,   66],
       [3962,   58,    1,   75],
       [4020,   58,    1,   57],
       [4078,   33,    1,   54],
       [4111,  102,    1,   23],
       [4213,   96,    1,   55],
       [4309,   33,    1,    6],
       [4342,   32,    1,   55],
       [4374,    4,    1,   86],
       [4378,   13,    1,   66],
       [4391,   17,    1,   86],
       [4408,   23,    1,   85],
       [4431,   56,    1,   43],
       [4487,   57,    1,   38],
       [4544,   19,    1,   11],
       [4563,   25,    1,   16],
       [4588,   16,    1,   10],
       [4604,   24,    1,   16],
       [4628,   30,    1,   13],
       [4658,   31,    1,   10],
       [4689,   19,    1,   25],
       [4708,    5,    1,   10],
       [4713,   24,    1,    5],
       [4737,    5,    1,    4],
       [4742,   58,    1,    3],
       [4800,   18,    1,   13],
       [4818,   98,    1,   10],
       [4916,   57,    1,   13],
       [4973,   16,    1,   20],
       [4989,   25,    1,   13],
       [5014,   50,    1,   13],
       [5064,    2,    1,   38],
       [5066,    7,    1,   10],
       [5073,   16,    1,   38],
       [5089,   10,    1,   13],
       [5099,   67,    1,   66],
       [5166,   41,    1,   13],
       [5207,   30,    1,   66],
       [5237,    5,    1,   31],
       [5242,   11,    1,   42],
       [5253,    4,    1,   66],
       [5257,    5,    1,   20],
       [5262,   10,    1,   20],
       [5272,    6,    1,   12],
       [5278,   12,    1,   11],
       [5290,    1,    1,   66],
       [5291,    7,    1,   28],
       [5298,    8,    1,   31],
       [5306,   42,    1,   39],
       [5348,   81,    1,   38],
       [5429,   16,    1,   38],
       [5445,   18,    1,   27],
       [5463,   10,    1,   73],
       [5473,    8,    1,   38],
       [5481,    7,    1,   38],
       [5488,   19,    1,   38],
       [5507,   13,    1,   63],
       [5520,   84,    1,   38],
       [5604,    4,    1,   38],
       [5608,   54,    1,   38],
       [5662,   26,    1,   38],
       [5688,   48,    1,   38],
       [5736,   50,    1,   41],
       [5786,    4,    1,    8],
       [5790,   14,    1,   64],
       [5804,    6,    1,   66],
       [5810,   31,    1,   59],
       [5841,   12,    1,   66],
       [5853,   47,    1,   44],
       [5900,    8,    1,    8],
       [5908,   14,    1,   18],
       [5922,   16,    1,   15],
       [5938,    2,    1,   66],
       [5940,    5,    1,   72],
       [5945,    5,    1,   66],
       [5950,   23,    1,   72],
       [5973,   42,    1,   66],
       [6015,   30,    1,   74],
       [6045,   89,    1,   24],
       [6134,   19,    1,   38],
       [6153,   47,    1,   66],
       [6200,  218,    1,   47],
       [6418,   55,    1,   58],
       [6473,  140,    1,   38],
       [6613,   45,    1,   38],
       [6658,   17,    1,   77],
       [6675,    9,    1,   13],
       [6684,   11,    1,   53],
       [6695,   13,    1,   24],
       [6708,   30,    1,   38],
       [6738,   15,    1,   48],
       [6753,    5,    1,   56],
       [6758,   19,    1,   48],
       [6777,    9,    1,   38],
       [6786,   13,    1,   48],
       [6799,    7,    1,   38],
       [6806,    7,    1,   63],
       [6813,  131,    1,   48],
       [6944,  142,    1,   68]])
       
#sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__),"../../data")))
#scenes = pd.read_csv('scene_times_nums.csv', header = None) 
#scenes = scenes.values

TR = 2
NUM_VOLUMES = arr_4d.shape[-1] 
ONSET_TIMES = scenes[:,0] 
ONSET_TIMES_NORMED = ONSET_TIMES - 17 #First recorded scene occurs at t = 17 sec 
DURATION = scenes[:,1] 
LABELS = scenes[:,3]
SCAN_TIMES =  np.arange(start=0, stop=2*NUM_VOLUMES, step=2)

#Creates a list that tells us scene id at given scan time 
factor_grid = []
for scan_time in SCAN_TIMES:
    index_list = np.where(ONSET_TIMES_NORMED < scan_time)[0]
    if scan_time == 0:
        label_index = 0
    else:
        label_index = index_list[-1] 
    factor_id = LABELS[label_index]
    factor_grid.append(factor_id)
    
factor_grid = np.array(factor_grid) #Convert to np array for future analysis
ALL_IDS = list(range(1, 91))

#############################################################################
     
def test_on_off_course():
    f1 = on_off_course([26],factor_grid)
    r1 = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0])
    assert_almost_equal(f1,r1)



def test_multiple_factors_course():
    f2 = multiple_factors_course([66], factor_grid)
    r2 =np.array([66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
       66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
       66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
       66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
       66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
       66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
       66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
       66, 66, 66, 66, 66, 66, 66, 66, 66,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0, 66, 66, 66, 66, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0, 66, 66, 66, 66, 66, 66, 66,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 66, 66, 66])
    assert_almost_equal(f2,r2)


test_GUMP_SCENES_IDS = [26, 36, 25, 38]
samp_gump, miss_gump = gen_sample_by_factors(test_GUMP_SCENES_IDS, factor_grid, False)
 
def test_gen_sample_by_factors():
    test_GUMP_SCENES_IDS = [26, 36, 25, 38]
    g1=gen_sample_by_factors(test_GUMP_SCENES_IDS, factor_grid, False)
    f3=list(g1[0].values())[0]
    r3=(np.array([128, 129, 130, 131, 132, 133, 134, 135, 136, 137]),
        np.array([138, 139, 140, 141, 142, 143, 144, 145, 146, 147]))
    f4=g1[1]
    r4=[25]
    assert_almost_equal(f3,r3)
    assert_almost_equal(f4,r4)

def test_get_training_samples():
    r5 = np.array([128, 129, 130, 131, 132, 133, 134, 135, 136, 137])
    f5= list(get_training_samples(samp_gump).values())[0]
    assert_almost_equal(f5,r5)
    
def test_get_tst_samples():
    f7 =list(get_tst_samples(samp_gump).values())[1]
    r7 =np.array([181, 182, 183, 184, 327, 328, 329, 330, 331, 332, 333, 334, 335,
       336, 337, 338, 339, 340, 341, 342])
    assert_almost_equal(f7,r7)
    
def test_make_label_by_time():
    g2= make_label_by_time(get_training_samples(samp_gump))
    r2 =(np.array([26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 36, 36, 36, 36, 36, 36, 36,
        36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38,
        38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
        38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
        38, 38, 38, 38, 38]),
 np.array([128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 150,
        164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
        177, 178, 179, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193,
        194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
        207, 208, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
        261, 262, 263, 264, 265, 266, 267, 268]))
    assert_almost_equal(g2,r2)
    
def test_other_scene_ids():
    test_GUMP_SCENES_IDS = [26, 36, 25, 38]
    f6= other_scene_ids(test_GUMP_SCENES_IDS)
    similar = []
    for tup in test_GUMP_SCENES_IDS:
        if tup in f6:
            similar.append(tup)
    r6 =[]
    assert_almost_equal(similar,r6)
    

def test_analyze_performance():
    predicted_labels=np.array([26,27,28,78,66,39])
    actual_labels=np.array([26,38,39,78,39,29])
    f8 =analyze_performance(predicted_labels, actual_labels)
    r8 = 0.33333333333333337
    assert_almost_equal(f8,r8)